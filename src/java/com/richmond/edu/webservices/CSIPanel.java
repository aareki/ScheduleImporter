package com.richmond.edu.webservices;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CSIPanel2.java
 *
 * Created on Nov 2, 2011, 3:22:19 PM
 */

import java.io.File;
import java.util.ArrayList;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author University of Richmond Web Programmers
 */
public class CSIPanel extends javax.swing.JPanel
{
    /**
     * 
     */
    private static final long                  serialVersionUID               = 1L;
    private ArrayList<CourseBean>              mCourses                       = new ArrayList<CourseBean>();            // List of courses
    private CourseReadWorker                   mCourseReadWorker              = null;
    private CourseWriteWorker                  mCourseWriteWorker             = null;
    
    private ArrayList<ScheduleBean>            mSchedules                     = new ArrayList<ScheduleBean>();            // List of schedules
    private ScheduleReadWorker                 mScheduleReadWorker            = null;
    private ScheduleWriteWorker                mScheduleWriteWorker           = null;

    private final String                       CANCEL_MODE_READ               = "READ";
    private final String                       CANCEL_MODE_UPLOAD             = "UPLOAD";
    private String                             cancelMode                     = CANCEL_MODE_READ;
    
    /** Creates new form CSIPanel2 */
    public CSIPanel()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        proceedButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        userNameTextField = new javax.swing.JTextField();
        userNameTextField.setText("username");   // FIX ME!!! KILL THIS
        passwordTextField = new javax.swing.JPasswordField();
        passwordTextField.setText("passeword");   // FIX ME!!! KILL THIS
        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        titleLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jCourseRadioButton = new javax.swing.JRadioButton();
        jScheduleRadioButton = new javax.swing.JRadioButton();
        //jSummerScheduleRadioButton = new javax.swing.JRadioButton();
        //jThinkAgainScheduleRadioButton = new javax.swing.JRadioButton();
        //jOsherScheduleRadioButton = new javax.swing.JRadioButton();
        jTestRadioButton = new javax.swing.JRadioButton();
        jProductionRadioButton = new javax.swing.JRadioButton();
        chooseButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        saveLogButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        proceedButton.setFont(new java.awt.Font("Verdana", 0, 13));
        proceedButton.setText("Proceed");
        proceedButton.setEnabled(false);
        proceedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedButtonActionPerformed(evt);
            }
        });

        quitButton.setFont(new java.awt.Font("Verdana", 0, 13));
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        userNameTextField.setFont(new java.awt.Font("Verdana", 0, 13));

        passwordTextField.setFont(new java.awt.Font("Verdana", 0, 13));

        userNameLabel.setFont(new java.awt.Font("Verdana", 0, 13));
        userNameLabel.setText("User:");

        passwordLabel.setFont(new java.awt.Font("Verdana", 0, 13));
        passwordLabel.setText("Password:");

        logTextArea.setColumns(20);
        logTextArea.setEditable(false);
        logTextArea.setFont(new java.awt.Font("Verdana", 0, 12));
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        titleLabel.setFont(new java.awt.Font("Verdana", 0, 24));
        titleLabel.setText("University of Richmond Course and Schedule Importer");

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 13));
        jLabel1.setText("File:");

        jTextField1.setFont(new java.awt.Font("Verdana", 0, 13));
        jTextField1.setText("/");
        jTextField1.setEnabled(false);

        buttonGroup1.add(jCourseRadioButton);
        jCourseRadioButton.setFont(new java.awt.Font("Verdana", 0, 13));
        jCourseRadioButton.setSelected(true);
        jCourseRadioButton.setText("Course");

        buttonGroup1.add(jScheduleRadioButton);
        jScheduleRadioButton.setFont(new java.awt.Font("Verdana", 0, 13));
        jScheduleRadioButton.setText("Regular Schedule");
        buttonGroup2.add(jTestRadioButton);
        jTestRadioButton.setFont(new java.awt.Font("Verdana", 0, 13));
        jTestRadioButton.setSelected(true);
        jTestRadioButton.setText("Test");

        buttonGroup2.add(jProductionRadioButton);
        jProductionRadioButton.setFont(new java.awt.Font("Verdana", 0, 13));
        jProductionRadioButton.setText("Production");

        chooseButton.setFont(new java.awt.Font("Verdana", 0, 13));
        chooseButton.setText("Choose...");
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        saveLogButton.setText("Save Log...");

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(titleLabel))
                    .add(layout.createSequentialGroup()
                        .add(52, 52, 52)
                        .add(userNameLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(userNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(passwordLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(passwordTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .add(515, 515, 515))
            .add(layout.createSequentialGroup()
                .add(37, 37, 37)
                .add(proceedButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(quitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(29, 29, 29)
                .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 410, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(53, 53, 53)
                .add(jLabel1)
                .add(18, 18, 18)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 295, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(chooseButton)
                .addContainerGap(235, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(113, 113, 113)
                .add(jCourseRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScheduleRadioButton)
                .add(55, 55, 55)
                .add(cancelButton)
                .addContainerGap(307, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(113, 113, 113)
                .add(jTestRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jProductionRadioButton)
                .addContainerGap(307, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 698, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .add(312, 312, 312)
                .add(saveLogButton)
                .addContainerGap(315, Short.MAX_VALUE))
        );

        layout.linkSize(new java.awt.Component[] {passwordTextField, userNameTextField}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(titleLabel)
                .add(11, 11, 11)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(userNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(userNameLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(passwordLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jLabel1)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chooseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jScheduleRadioButton)
                    .add(jCourseRadioButton)
                    .add(cancelButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTestRadioButton)
                    .add(jProductionRadioButton))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(proceedButton)
                            .add(quitButton)))
                    .add(layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(jProgressBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(11, 11, 11)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 324, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(saveLogButton)
                .add(17, 17, 17))
        );
    }// </editor-fold>
    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
        jFileChooser1.setFileFilter(new FileFilter()
        {

            @Override
            public boolean accept(File file)
            {
                String filename = file.getName();
                if (file.isDirectory()) { return true; }
                if(filename.endsWith(".csv"))
                {
                    return true;
                }
/*
                if(filename.endsWith(".xls"))
                {
                    return true;
                }
                if(filename.endsWith(".xlsx"))
                {
                    return true;
                }
*/
                return false;
            }
            @Override
            public String getDescription()
            {
//                return "*.csv, *.xls, *.xlsx";
                return "*.csv";
            }
        });
        int fileChooseResult = jFileChooser1.showOpenDialog(this);
        switch(fileChooseResult)
        {
            case JFileChooser.APPROVE_OPTION:
                    {
                        chooseButton.setEnabled(false);
                        userNameTextField.setEnabled(false);
                        passwordTextField.setEnabled(false);
                        proceedButton.setEnabled(false);
                        File file = jFileChooser1.getSelectedFile();
                        this.jTextField1.setText(file.getAbsolutePath());
                        // Course or Schedule:
                        if(this.jCourseRadioButton.isSelected())
                        {
                            mCourseReadWorker = new CourseReadWorker(file, logTextArea)
                            {
                                @Override
                                protected void done()
                                {
                                    cancelButton.setEnabled(false);
                                    try
                                    {
                                        mCourses = get();
                                        
                                        // FIX ME!!! Handle errors here!!
                                        proceedButton.setEnabled(true);
                                    }
                                    catch(CancellationException e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Cancelled", "Course Import", JOptionPane.INFORMATION_MESSAGE);
                                        
                                    }
                                    catch(ExecutionException e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Execution Exception", "Course Import", JOptionPane.ERROR_MESSAGE);
                                    }
                                    catch(InterruptedException e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Interrupted Exceptioon", "Course Import", JOptionPane.ERROR_MESSAGE);                                    
                                    }
                                    catch(Exception e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Generic Exception", "Course Import", JOptionPane.ERROR_MESSAGE);
                                    }
                                    chooseButton.setEnabled(true);
                                    userNameTextField.setEnabled(true);
                                    passwordTextField.setEnabled(true);
                                }
                            };
                            cancelMode = CANCEL_MODE_READ;
                            mCourseReadWorker.execute();
                            cancelButton.setEnabled(true);
                        }
                        else if(this.jScheduleRadioButton.isSelected())
                        {
                            mScheduleReadWorker = new ScheduleReadWorker(file, logTextArea)
                            {
                                @Override
                                protected void done()
                                {
                                    cancelButton.setEnabled(false);
                                    try
                                    {
                                        mSchedules = get();
                                        
                                        // FIX ME!!! Handle errors here!!
                                        proceedButton.setEnabled(true);
                                    }
                                    catch(CancellationException e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Cancelled", "Schedule Import", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                    catch(ExecutionException e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Execution Exception", "Schedule Import", JOptionPane.ERROR_MESSAGE);
                                    }
                                    catch(InterruptedException e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Interrupted Exceptioon", "Schedule Import", JOptionPane.ERROR_MESSAGE);                                    
                                    }
                                    catch(Exception e)
                                    {
                                        JOptionPane.showMessageDialog(null, "Generic Exception", "Schedule Import", JOptionPane.ERROR_MESSAGE);
                                    }
                                    chooseButton.setEnabled(true);
                                    userNameTextField.setEnabled(true);
                                    passwordTextField.setEnabled(true);
                                }
                            };
                            cancelMode = CANCEL_MODE_READ;
                            mScheduleReadWorker.execute();
                            cancelButton.setEnabled(true);
                        }
                        
                        //else(other schedule catalogs)
                    }
                    break;
            case JFileChooser.CANCEL_OPTION:
                    {
                        // Do nothing
                    }
                    break;
            case JFileChooser.ERROR_OPTION:
                    {
                        // Do nothing
                    }
                    break;
        }
    }                                            

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(-1);
    }                                          

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // Cancel the worker and wake it up should it be sleeping
        if(cancelMode.equals(CANCEL_MODE_READ))
        {
            if(this.jCourseRadioButton.isSelected())
            {
                mCourseReadWorker.cancel(true);
            } 
            else
            {
            	 mScheduleReadWorker.cancel(true);
            }
        }
        else
        {
            if(this.jCourseRadioButton.isSelected())
            {
                mCourseWriteWorker.cancel(true);
            }
            else
            {
            	mScheduleWriteWorker.cancel(true);
            }
        }
        cancelButton.setEnabled(false);
    }                                            

    private void proceedButtonActionPerformed(java.awt.event.ActionEvent evt)
    {
        logTextArea.append("Beginning " + (jCourseRadioButton.isSelected()?"course":"schedule") + " upload.");
        chooseButton.setEnabled(false);
        userNameTextField.setEnabled(false);
        passwordTextField.setEnabled(false);
        proceedButton.setEnabled(false);
        if(this.jCourseRadioButton.isSelected())
        {
            mCourseWriteWorker = new CourseWriteWorker(userNameTextField.getText(), new String(passwordTextField.getPassword()), mCourses, logTextArea, jProductionRadioButton.isSelected())
            {
                @Override
                protected void done()
                {
                    cancelButton.setEnabled(false);
                    try
                    {
                        // Get the results now and put them into the log:
                        logTextArea.append(get());
                        
                        // FIX ME!!! Handle errors here!!
                    }
                    catch(CancellationException e)
                    {
                        logTextArea.append("Cancelled.\n");
                        JOptionPane.showMessageDialog(null, "Cancelled", "Course Upload", JOptionPane.INFORMATION_MESSAGE);
                    }
                    catch(ExecutionException e)
                    {
                        logTextArea.append("Execution Exception.\n");
                        JOptionPane.showMessageDialog(null, "Execution Exception", "Course Upload", JOptionPane.ERROR_MESSAGE);
                    }
                    catch(InterruptedException e)
                    {
                        logTextArea.append("Interrupted Exception.\n");
                        JOptionPane.showMessageDialog(null, "Interrupted Exceptioon", "Course Upload", JOptionPane.ERROR_MESSAGE);                                    
                    }
                    catch(Exception e)
                    {
                        logTextArea.append("Generic Exception.\n");
                        JOptionPane.showMessageDialog(null, "Generic Exception", "Course Upload", JOptionPane.ERROR_MESSAGE);
                    }
                    chooseButton.setEnabled(true);
                    userNameTextField.setEnabled(true);
                    passwordTextField.setEnabled(true);
                }
            };
            cancelMode = CANCEL_MODE_UPLOAD;
            cancelButton.setEnabled(true);
            mCourseWriteWorker.execute();
        }
        else if(this.jScheduleRadioButton.isSelected())
        {
            mScheduleWriteWorker = new ScheduleWriteWorker(userNameTextField.getText(), new String(passwordTextField.getPassword()), mSchedules, logTextArea, jProductionRadioButton.isSelected())
            {
                @Override
                protected void done()
                {
                    cancelButton.setEnabled(false);
                    try
                    {
                        // Get the results now and put them into the log:
                        logTextArea.append(get());
                        
                        // FIX ME!!! Handle errors here!!
                    }
                    catch(CancellationException e)
                    {
                        logTextArea.append("Cancelled.\n");
                        JOptionPane.showMessageDialog(null, "Cancelled", "Schedule Upload", JOptionPane.INFORMATION_MESSAGE);
                    }
                    catch(ExecutionException e)
                    {
                        logTextArea.append("Execution Exception.\n");
                        JOptionPane.showMessageDialog(null, "Execution Exception", "Schedule Upload", JOptionPane.ERROR_MESSAGE);
                    }
                    catch(InterruptedException e)
                    {
                        logTextArea.append("Interrupted Exception.\n");
                        JOptionPane.showMessageDialog(null, "Interrupted Exceptioon", "Schedule Upload", JOptionPane.ERROR_MESSAGE);                                    
                    }
                    catch(Exception e)
                    {
                        logTextArea.append("Generic Exception.\n");
                        JOptionPane.showMessageDialog(null, "Generic Exception", "Schedule Upload", JOptionPane.ERROR_MESSAGE);
                    }
                    chooseButton.setEnabled(true);
                    userNameTextField.setEnabled(true);
                    passwordTextField.setEnabled(true);
                }
            };
            cancelMode = CANCEL_MODE_UPLOAD;
            cancelButton.setEnabled(true);
            mScheduleWriteWorker.execute();
        }
    }

    // Variables declaration - do not modify
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton chooseButton;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jCourseRadioButton;
    private javax.swing.JRadioButton jScheduleRadioButton;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton jTestRadioButton;
    private javax.swing.JRadioButton jProductionRadioButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton proceedButton;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton saveLogButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration
}


